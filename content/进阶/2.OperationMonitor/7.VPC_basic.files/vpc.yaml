AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC Resource
Parameters:
  VpcCidr:
    Description: The VPC CIDR
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnetCidr1:
    Description: The CIDR of public subnet1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.11.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnetCidr2:
    Description: The CIDR of public subnet2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.12.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateAppSubnetCidr1:
    Description: The CIDR of the private subnet1 for applications
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.21.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateAppSubnetCidr2:
    Description: The CIDR of the private subnet2 for applications
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.22.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateDBSubnetCidr1:
    Description: The CIDR of the private subnet1 for database
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.31.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateDBSubnetCidr2:
    Description: The CIDR of the private subnet2 for database
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.32.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KeyPairName:
    Description: Name of SSH KeyPair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Provide the name of an existing SSH key pair

Resources:
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: SecWorkshopVPC
    Properties:
      GroupDescription: BastionHost
      VpcId: !Ref SecWorkshopVPC
      Tags:
        - Key: Name
          Value: SG_Bastion
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: The SSH service
        - IpProtocol: https
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: The https service

  InstanceNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: ENI
      SubnetId: !Ref PublicSubnet1
      GroupSet: 
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion ENI

  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.micro
      ImageId: ami-01748a72bed07727c
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref InstanceNetworkInterface
          DeviceIndex: 0
      SourceDestCheck: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 10
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: BastionInstance
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          # Updates & Install needed programs
          yum update -y 


  SecWorkshopVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: SecWorkshopVPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PublicSubnetCidr1
      MapPublicIpOnLaunch : true
      Tags:
        - Key: Name
          Value: PublicSubnet1
      VpcId: !Ref SecWorkshopVPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PublicSubnetCidr2
      MapPublicIpOnLaunch : true
      Tags:
        - Key: Name
          Value: PublicSubnet2
      VpcId: !Ref SecWorkshopVPC

  PrivateAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PrivateAppSubnetCidr1
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: PrivateAppSubnet1
      VpcId: !Ref SecWorkshopVPC
  PrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PrivateAppSubnetCidr2
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: PrivateAppSubnet2
      VpcId: !Ref SecWorkshopVPC

  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PrivateDBSubnetCidr1
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: PrivateDBSubnet1
      VpcId: !Ref SecWorkshopVPC
  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PrivateDBSubnetCidr2
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: PrivateDBSubnet2
      VpcId: !Ref SecWorkshopVPC      

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SecWorkshopInternetGateway
  VPCGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref SecWorkshopVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecWorkshopVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecWorkshopVPC

  PrivateAppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateAppSubnet1

  PrivateAppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateAppSubnet2
  PrivateDBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateDBSubnet1

  PrivateDBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateDBSubnet2

  # NatGateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: NatGateway
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


