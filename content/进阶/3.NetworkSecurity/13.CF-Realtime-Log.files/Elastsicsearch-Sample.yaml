AWSTemplateFormatVersion: "2010-09-09"

Description: This CloudFormation Template can be used to quickly create Elasticsearch domain.

Parameters:
  ResourceName:
    Type: String
    Default: ES-Sample
    Description: 'Prefix for the resources that are created.'

  ESDomainName:
    Type: String
    Default: demo
    Description: 'Name of the Elasticsearch Domain.'

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: This must be the name of an existing EC2 KeyPair.
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instances created in this scenario.'

  KibanaUsername:
     Type: String
     Default: admin
     Description: 'Username of Elasticsearch Kibana administrator'

  KibanaPassword:
     Type: String
     Default: P@ssw0rd
     Description: 'Password of Elasticsearch Kibana administrator, Default: P@ssw0rd'



Mappings:
  RegionMap:
    ap-east-1:
      "64": ami-8380faf2
    ap-northeast-1:
      "64": ami-02be181636ed95ac5
    ap-northeast-2:
      "64": ami-004b3430b806f3b1a
    ap-northeast-3:
      "64": ami-0166a1a40f68b6afc
    ap-southeast-1:
      "64": ami-08b3278ea6e379084
    ap-southeast-2:
      "64": ami-00d7116c396e73b04
    me-south-1:
      "64": ami-0aff4c97b2c0968e0
    ap-south-1:
      "64": ami-0f59afa4a22fad2f0
    ca-central-1:
      "64": ami-0062c497b55437b01
    eu-central-1:
      "64": ami-0410f42dd64e525be
    eu-north-1:
      "64": ami-0ca3b50bc99a41773
    eu-west-1:
      "64": ami-0987ee37af7792903
    eu-west-2:
      "64": ami-05945867d79b7d926
    eu-west-3:
      "64": ami-00c60f4df93ff408e
    sa-east-1:
      "64": ami-0fb487b6f6ab53ff4
    us-east-1:
      "64": ami-09f9d773751b9d606
    us-east-2:
      "64": ami-0891395d749676c2e
    us-west-1:
      "64": ami-0c0e5a396959508b0
    us-west-2:
      "64": ami-0bbe9b07c5fe8e86e
    af-south-1:
      "64": ami-0085c012349ac73b1


Resources:

####Create Elasticsearch Sample VPC#####

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.66.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  RouteTable:
    DependsOn:
      - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.66.0.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  SubnetAssoc:
    DependsOn:
      - Subnet
      - RouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.66.1.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  SubnetAssoc1:
    DependsOn:
      - Subnet1
      - RouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref ResourceName
        - Key: Network
          Value: Public
  InboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  OutboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  SubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref PublicNACL
  ProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ProxyInstance-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
  ESSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ElasticsearchSecurityGroup
      VpcId: !Ref VPC
      GroupName: ElasticsearchSecurityGroup
      SecurityGroupIngress:
        - FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
          CidrIp: 0.0.0.0/0

####Create Proxy Intance for Kibana#####

  ProxyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: c5.large
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - "64"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref ProxySecurityGroup
          SubnetId:
            Ref: Subnet
      Tags:
        - Key: Name
          Value: ProxyInstance


#### Create Elasticsearch Domain in VPC #####
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Ref ESDomainName
      ElasticsearchVersion: 7.9
      ElasticsearchClusterConfig:
        InstanceCount: '2'
        InstanceType: r5.large.elasticsearch
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig: 
           AvailabilityZoneCount: 2
      EBSOptions:
        EBSEnabled: 'true'
        #Iops: 0
        VolumeSize: 20
        VolumeType: gp2
      SnapshotOptions:
        AutomatedSnapshotStartHour: '0'
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: '*'
      # AdvancedOptions:
      #   rest.action.multi.allow_explicit_index: 'true'
      # LogPublishingOptions:
      #   SEARCH_SLOW_LOGS:
      #     CloudWatchLogsLogGroupArn: arn:aws:logs:us-east-1:123456789012:log-group:/aws/aes/domains/es-slow-logs
      #     Enabled: 'true'
      #   INDEX_SLOW_LOGS:
      #     CloudWatchLogsLogGroupArn: arn:aws:logs:us-east-1:123456789012:log-group:/aws/aes/domains/es-index-slow-logs
      #     Enabled: 'true'
      # Tags:
      #   - Key: foo
      #     Value: bar
      VPCOptions:
        SubnetIds:
          - !Ref Subnet
          - !Ref Subnet1
        SecurityGroupIds:
          - !Ref ESSecurityGroup
      DomainEndpointOptions: 
        EnforceHTTPS: true
      NodeToNodeEncryptionOptions: 
        Enabled: true
      EncryptionAtRestOptions: 
          Enabled: true
      AdvancedSecurityOptions: 
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions: 
          MasterUserName: !Ref KibanaUsername
          MasterUserPassword: !Ref KibanaPassword




Outputs:
  KibanaURL:
    Description: Kibana URL
    Value: https://localhost:9200/_plugin/kibana/
  TargetInstance:
    Description: Proxy IP Address
    Value: !GetAtt ProxyInstance.PublicIp
  SSLTunnelforKibanaAccess:
    Description: Setup SSH tunnel to access Kibana URL in VPC
    Value: !Sub "ssh -i your-key.pem ubuntu@${ProxyInstance.PublicIp} -N -L 9200:${ElasticsearchDomain.DomainEndpoint}:443"
  DomainEndpoint:
    Description: Elasticsearch Domain Endpoint
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint


