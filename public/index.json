[
{
	"uri": "http://gotoaws.cloudguru.run/",
	"title": "Amazon Connect Workshop",
	"tags": [],
	"description": "",
	"content": "Amazon Connect介绍 Amazon Connect 是一个易于使用的全渠道云联络中心，可帮助公司以更低的成本提供卓越的客户服务。 十多年前，亚马逊的零售业务需要一个联络中心为我们的客户提供个性化、动态和自然的体验。我们找不到满足我们需求的产品，所以我们构建了Amazon Connect。构建完成之后，我们对所有企业开放了此服务。如今，成千上万的公司使用 Amazon Connect服务，每天为数百万客户提供服务，客座席数量从 10 到数万不等。\nAmazon Connect 从一开始就设计支持全渠道，为您的客户和代理提供跨语音和聊天的无缝体验。Amazon Connect还提供基于技能的路由、强大的实时和历史分析，以及易于使用的管理工具——所有这些都采用即用即付的定价策略。所有这些，意味着 Amazon Connect 简化了联络中心的运营，提高代理效率，降低成本。您可以在几分钟内建立一个可以扩展以支持数百万客户的联络中心。\nWorkshop介绍 通过本Workshop的实验，可以帮助您了解如何快速搭建Amazon Connect云联络中心。 本Workshop分为两部分：\n  Amazon Connect基础：这部分介绍联络中心的基本功能，内容包括：创建并配置Amazon Connect实例、申请电话号码、编写联系流，并进行语音和聊天测试。\n  Amazon Connect进阶：本部分介绍联络中心的高级用法，我们将通过与Lambda集成实现挂机后评价，以及创建一个Lex机器人来实现智能客服，并将呼叫者路由到正确的队列。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/1.introduction/",
	"title": "Workshop整体介绍",
	"tags": [],
	"description": "",
	"content": "在这一系列实验中，我们将使用 Amazon Connect 服务构建基于云联络中心，并探索与其他 AWS 服务（如 AWS Lambda、Amazon DynamoDB和Amazon Lex 等）的集成，以构建现代且强大的联络中心。\n本Workshop旨在介绍 Amazon Connect，帮助以前不了解Amazon Connect 的用户掌握搭建云联络中心的技能。\n本实验涉及到的服务一部分可以免费使用， 但是也有多项服务可能会产生少量使用费用。请参阅定价页面以查看AWS Lambda、DynamoDB、Amazon Lex 和 Amazon Connect等服务的免费套餐情况和计费方式。\n本次Workshop分为两部分：\n Amazon Connect基础：在这部分您可以了解以下技术内容：   部署Amazon Connect实例 申请电话号码并设置Contact Flow 了解和编写Contact Flow 进行语音/聊天测试 查看实时/历史指标和报告   Amazon Connect进阶：从部分您可以了解以下技术内容：   通过将Contact Flow与Lambda的集成实现挂机后评价，并将客户评价写入DynamoDB Amazon Connect与Lex集成实现智能客服  一般来说，需要先完成基础部分，然后再进行进阶部分。\n\r如果您对基础部分比较熟悉，而打算直接做进阶部分的话，则必须完成以下的基础部分（进阶部分会依赖以下内容）：\n 创建Amazon Connect实例 申请电话号码 编写联系流  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/",
	"title": "Amazon Connect基础",
	"tags": ["beginner"],
	"description": "",
	"content": "把AWS控制台设置为中文界面 登录AWS控制台以后，缺省显示的语言为英文，可以按照下图所示的方式切换为中文。 "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/",
	"title": "1. 通过Lambda实现挂机评价",
	"tags": ["advanced"],
	"description": "",
	"content": "实验目的 在这部分，您将学习如何将 AWS Lamda 和 Amazon DynamoDB 服务与您的Amazon Connect进行集成。\nAmazon Connect 与其他 AWS 服务（如 AWS Lambda）的原生集成允许您为呼叫者创建动态、个性化的体验。\n在本实验中，我们将借助AWS Lambda 和 Amazon DynamoDB服务，实现客服通话结束后邀请客户对本次服务进行评价。\n本部分试验主要包含以下内容：\n 根据提供的示例创建 AWS Lambda 函数。 在Disconnect Flow中设计挂机评价流程。 通过在Disconnect Flow中集成Lambda将客户的评价写入DynamoDB。  本次实验使用到以下AWS服务：\n Amazon Connect Lambda DynamoDB  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/1.deploy/",
	"title": "1. 部署Amazon Connect",
	"tags": ["beginner"],
	"description": "",
	"content": "部署Amazon Connect实例 在这部分，您将学习如何部署并验证您的第一个云联络中心\n目前，Amazon Connect支持的区域如下：\n Africa (Cape Town) Europe (London) Asia Pacific (Singapore) Asia Pacific (Sydney) Europe (Frankfurt) Asia Pacific (Seoul) Asia Pacific (Tokyo) US East (N. Virginia) Canada (Central) US West (Oregon)  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/",
	"title": "2. 使用Amazon Connect 与Amazon Lex创建智能聊天机器人",
	"tags": ["advanced"],
	"description": "",
	"content": "使用Amazon Connect 与 Amazon Lex创建交互式体验的智能聊天机器人 在这个模块，我们创建一个基于Amazon Connect 与 Amazon Lex的交互式体验的智能聊天机器人用来智能客服场景，该机器人具备一下功能：\n 通过 Amazon Connect Chat UI集成到客户端，并使聊天机器人具备智能对答与人工客服的功能 Amazon Connect Chat UI与Amazon Lex集成过程中，具备交互式体验能力 使用Amazon Connect CCP，集成到客户系统后台，使其具备后台集成能力  什么是交互式消息的 Amazon Connect Chat 交互式消息是指在一些客户场景下，对用户交互过程提供选项式的交互体验，用户无需手动输入，而是点击选项即可，Amazon Connect提供了与Lex集成的方式，可以通过Connect的Contact Flow进行路由后到Lex，Lex通过对交互过程使用定制的Lambda进行消息处理后，将选项显示给Connect后显示给客户用于交互；\n在此过程中Connect Chat提供了3种类型的交互式模版以供Lex进行集成： 本次实验包括：  介绍什么是Lex？ 创建可交互式体验的Lex聊天机器人 与Amazon Connect进行集成 集成Amazon Connect CCP  本次实验使用到的AWS服务：  Amazon Connect Amazon Lex CloudFormation API Gateway CloudFront S3 Lambda DynamoDB  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/",
	"title": "Amazon Connect进阶",
	"tags": ["advanced"],
	"description": "",
	"content": "在完成了基础部分以后，可以根据自己的业务系统的实际情况，有选择的对进阶部分进行了解。 如果您对基础部分都比较熟悉，而打算直接做进阶部分的话，则必须完成以下的基础部分（进阶部分会依赖以下的部分）：\n 部署Amazon Connect 部署云端基础架构  通过这部分的实验内容，您可以了解以下技术内容：\n 通过与Lex的集成实现智能聊天客服 通过Lambda实现挂机评价  这部分需要在完成基础内容以后进行操作，大概需要4-6小时。\n\r"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/1.deploy/1.deployconnect/",
	"title": "1.1 创建Amazon Connect实例",
	"tags": ["beginner"],
	"description": "",
	"content": "Amazon Connect介绍 Amazon Connect通过方便易用的全渠道云联络中心服务，以更低的成本提供卓越的客户服务。\n使用 Amazon Connect，您可以在几分钟内建立一个联络中心，并可扩展以支持数以百万计的客户。只需点击几下，您即可设置好您的联络中心，从而使座席可以立即开始帮助客户。比传统联络中心解决方案最高节省 80% 的成本，无最低费用、长期承诺或预付许可证费用。使用Amazon Connect，您可以打破地域的限制，在任何地方安排成千上万的代理，轻松地扩展或缩减以满足业务需求。\n详情见官方文档：https://aws.amazon.com/cn/connect/\n开始部署Amazon Connect  验证您的Region。Amazon Connect目前已经在十个以上区域推出。请选择您要在其中部署 Amazon Connect 实例的区域。 导航到AWS 区域服务网页以验证特定区域的 Amazon Connect 服务可用性。  选择所需区域后，从顶部的搜索栏中搜索 Amazon Connect 服务，然后进入到Amazon Connect服务页面。 如果这是该区域中的第一个 Amazon Connect 实例，请选择Create Instance。 如果您在此区域中有实例，请选择添加实例。\n 设置身份管理:\n 选择“在 Amazon Connect 中创建和管理用户”。 在访问URL字段设置一个唯一的实例名, 建议使用时期+ID的格式 (比如: 20220408douglas)。 点击下一步。     添加管理员。在添加管理员页面填写管理员信息。该管理员用于登录Amazon Connect后台。填写完毕后点击下一步   在设置通话界面，保持默认不变，即：\n 选择“允许入站呼叫”。 选择“允许出站呼叫”。 选择下一步。     在数据存储页面，保持默认设置，选择下一步。   在审核和创建页面，审核您的设置，然后点击“创建实例”。\n  等待实例创建完成。\n  一旦实例创建完成，您就会看到“开始使用”。然后您就可以进入到下一个实验环节：申请电话号码。\n  点击“开始使用”，您会以应急账号登录Connect管理控制台。在正常情况下，建议使用“账户概览”页面的Access URL进行访问，并使用创建Amazon Connect实例时设置的管理员账号进行登录。 \r"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/1.-introlex/",
	"title": "2.1 在Amazon Connect中添加Amazon Lex机器人",
	"tags": ["advanced"],
	"description": "",
	"content": "Lex是什么 Amazon Lex 是 AWS 提供的用于构建会话界面的服务。 构建的界面可用于基于文本和基于语音的聊天。 Lex 使用与 Alexa 相同的会话引擎。 Amazon Lex 自动程序由自动语音识别 (ASR) 和自然语言理解 (NLU) 功能提供支持。\n添加 Amazon Lex 机器人 在后续步骤中，我们将完成两部分搭建，第一部分是构建Amazon Connect与Lex机器人的交互式消息，第二部分是使用Amazon Connect ChatUI将交互页面与客户端集成；\n借助Amazon Lex，可以构建让客户感到自然的对话互动，Amazon Lex与Amazon Connect的集成可以通过补货客户侧的输入，经过Contact flow的流程编排，满足对关键信息输入及获取的需求。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/1.deploy/2.claimnumber/",
	"title": "1.2 申请电话号码并配置联系流",
	"tags": ["beginner"],
	"description": "",
	"content": "一、申请电话号码  （接上一部分）点击“开始使用”进入到Amazon Connect的管理界面。 在欢迎使用 Amazon Connect页面，点击“开始”。(如果浏览器弹出申请麦克风权限的提示，选择“允许”。)  在申请电话号码页面，进行如下操作：  在“国家/地区”列表中选择对应的国家。 在类型列表中选择“DID（直接内部拨号）”。 在电话号码列表中选择您想要的电话号码。 点击下一步。 在“申请电话号码”页面，点击“Continue”。     在某些国家/地区，无法直接申请电话号码，需要提Support Case申请。详见：https://docs.aws.amazon.com/connect/latest/adminguide/claim-phone-number.html\n\r申请电话号码成功后，会进入控制面板页面，点击“查看电话号码”，即可看到申请的电话号码。  点击新创建的电话号码，即可进入到“编辑电话号码页面”。可以看到，电话号码会自动跟Sample inbound flow (first contact experience)进行关联，然后就可以拨打这个电话进行测试。关于联系流的作用，后边的试验再进行介绍。   以上步骤均使用应急账号进行Connect的配置。在正常情况下，建议使用“账户概览”页面的Access URL进行访问，并使用创建Amazon Connect实例时设置的管理员账号进行登录。 \r"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/1.deploy/3.testcontact/",
	"title": "1.3 测试联络中心",
	"tags": ["beginner"],
	"description": "",
	"content": "试验说明 您有两种方法可以进行测试，一、使用您自己的手机或者固定电话拨打Connect号码。二、Amazon Connect本身也支持电话的外呼，如果您想避免产生手机通讯费，可以创建一个Agent用户，然后同时打开两个浏览器（比如Chrome和Firefox），并分别使用管理员账号和Agent账号进行登录。在进行通话测试的时候，同时在两个浏览器打开CCP面板，在其中一个CCP面板直接拨打Amazon Connect号码，然后在另一个CCP面板中进行接听。\n\r一、创建Agent用户 如果您准备使用自己的手机或者固定电话进行测试，创建Agent用户不是必须的，您可以跳过这一步。\n\r 使用管理员账号登录Amazon Connect控制台，依次导航到“用户”-“用户管理”，并点击“添加新用户”。 在添加新用户界面，依次输入如下信息，名：Agent，姓：aws，登录：Agent，密码：Agent@123。安全配置文件选择“Agent”，路由配置文件选择“Basic Routing Profile”。  点击“保存”按钮。 打开另外一个浏览器，并使用新创建的Agent进行登录。  二、测试电话和聊天 通过前边的步骤，我们已经完成了Amazon Connect云联络中心的创建和配置。接下来就可以进行验证，验证分为两部分：电话验证和Chat验证。\n1. 测试电话  点击Connect控制台界面右上角的电话按钮， 弹出CCP面板(呼叫控制面板)，将状态设置为“Available”状态。  【选项1】使用手机拨打新申请的电话号码。 【选项2】按照“实验说明”部分的方法，同时在两个浏览器登录两个用户账号，使用其中一个拨打电话，另外一个进行接听。  您会听到一段英语欢迎语，然后依次按照以下步骤操作（该流程在Sample inbound flow中定义）：\n 按1进入客服队列。 按1移动到队列头部。 按1进入队列，等待客服进行接听。  在CCP面板会接收到来电提示，点击接听。 进行通话测试，测试结束后挂断电话。 点击“结束联系人”重新进入到“Available”状态。  2. 测试聊天   在Amazon Connect后台“控制面板”， 点击“测试聊天”，进入“测试聊天”页。\n  点击“激活联系人控制面板”。   点击测试设置，将联系流设置为“Sample inbound flow (first contact experience)”。   点击模拟网站上的聊天图标开始以客户身份发起聊天。稍等片刻就可以收到欢迎信息，然后等待客服进行接听。\n  在右侧的CCP面板上，客服点击“接受聊天”。\n  在客户侧和客服侧输入信息进行聊天。\n  结束聊天。\n  恭喜！ 您已经申请了电话号码，并成功进行了电话和聊天测试。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivechatbot/",
	"title": "2.2 部署交互式体验机器人",
	"tags": ["advanced"],
	"description": "",
	"content": "实验目的 本实验构建交互式体验的机器人，使用与Lambda集合的Lex机器人，可在Lex的Bot中构建Intent及Slot交互流程，配合Connect需要的Request和Respone，完成Connect对Lex的调用组合。\n本次实验使用到以下AWS服务：\n Amazon Lex Lambda  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployconnectchatui/",
	"title": "2.3 部署Connect Chat UI",
	"tags": ["advanced"],
	"description": "",
	"content": "实验目的  前置条件\n 该部分依赖步骤2.2中，部署完成的Amazon Connect实例以及导入的Contact Flow和配置完成的Amazon Lex。如果上述步骤未完成，建议先完成步骤2.2。   该部分实验使用Amazon Chat UI与客户端进行集成，该部分中分为两个模块：\n 模块一：Chat UI集成 模块二：CCP集成后台  本次实验使用到以下AWS服务：\n Amazon Connect Amazon Lex CloudFormation API Gateway CloudFront S3 Lambda DynamoDB  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/1.createiamrole/",
	"title": "创建IAM策略和角色",
	"tags": ["advanced"],
	"description": "",
	"content": "实验说明 为了使我们的 AWS Lambda 函数成功执行，AWS Lambda 需要具有适当权限的 AWS Identity and Access Management (IAM) 角色和策略。 使用本文中的以下步骤为 AWS Lambda 函数创建示例角色和策略，以访问所有 Amazon DynamoDB 表。\n一、 创建IAM策略  在AWS控制台，打开IAM控制面板。 在导航面板，选择“策略”，“创建策略”。 选择“JSON”标签，复制以下JSON代码，并将其粘贴到文本框中。 说明：如下代码赋予对Lambda和DynamoDB的完全访问权限。  { \u0026#34;Version\u0026#34;:\u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;:[ { \u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;:[ \u0026#34;lambda:*\u0026#34;, \u0026#34;dynamodb:*\u0026#34; ], \u0026#34;Resource\u0026#34;:\u0026#34;*\u0026#34; } ] } 选择“下一步：标签”。 选择“下一步：审核” 将策略命名为AmazonConnectSurveyLambdaPolicy，然后点击“创建策略”。  二、 创建IAM角色  在导航面板，依次选择“角色”，“创建角色”。 在“选择可信实体”页，选择Lambda，并点击“下一步”  在添加权限页，搜索并选中前边创建的策略AmazonConnectSurveyLambdaPolicy。 然后点击“下一步”。 角色名称命名为“AmazonConnectSurveyLambdaRole”，点击“创建角色”。  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/2.createdynamodb/",
	"title": "创建DynamoDB",
	"tags": ["advanced"],
	"description": "",
	"content": "试验说明 Amazon DynamoDB 是一种快速灵活的 NoSQL 数据库服务，适用于任何规模的有一致性、个位数毫秒延迟需求的应用程序。 它是一个完全托管的云数据库，支持文档和键值存储模型。 其灵活的数据模型、可靠的性能和吞吐量容量的自动扩展，使其非常适合存储和引用来自Amazon Connect的信息。\n在客户进行评价后，Amazon Connect通过集成Lambda将客户的评分及相关信息写入DynamoDB，这些信息包括：ContactId, ContactFlowId, ContactFlowName, ContactFlowModuleType, Timestamp, Agent, SurveyScore等。 在创建DynamoDB时，以Agent作为分区键，以Timestamp作为排序键。\n创建DynamoDB表  在AWS控制台，打开DynamoDB服务，然后选择“创建表”。 在“创建表页面”，填写表名为AmazonConnectSurvey，填写Agent作为分区键，填写Timestamp作为排序键，数据类型均选择“String”。其它保留默认设置。  其它保留默认设置，然后点击“创建表”。 等待表创建完成，状态显示为“活跃”。  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/3.createlambda/",
	"title": "创建Lambda函数",
	"tags": ["advanced"],
	"description": "",
	"content": "试验说明 AWS Lambda 让您无需预置或管理服务器即可运行代码。 您只需为消耗的计算时间付费。 当您的代码未运行时，不收取任何费用。 上传您的代码，Lambda 会负责以高可用性运行和扩展您的代码所需的一切。\n在客户进行评价后，在Amazon Connect的联系流调用Lambda将评价信息写入DynamoDB。\n一、创建Lambda函数  在AWS控制台，打开AWS Lambda服务，然后选择“创建函数”。 选择从头开始创作。 填写函数名称为AmazonConnectSurveyLambda，运行时选择Node.js 14.x。 展开更改默认执行角色，选择“使用现有角色”。 在现有角色列表选择之前创建的角色“AmazonConnectSurveyLambdaRole”  点击“创建函数”。 等待函数创建完成后，点开新创建的函数，在“代码”标签页，替换为如下的代码。  var AWS=require(\u0026#34;aws-sdk\u0026#34;); var docClient=new AWS.DynamoDB.DocumentClient(); exports.handler=(event,context,callback)=\u0026gt; { console.log(\u0026#34;event:\u0026#34;+JSON.stringify(event)); var customerPhone=event.Details.ContactData.CustomerEndpoint.Address; //let nz_date_string = new Date().toLocaleString(\u0026#34;en-US\u0026#34;, { timeZone: \u0026#34;Asia/Shanghai\u0026#34; });  //console.log(nz_date_string);  var params={ TableName:\u0026#34;AmazonConnectSurvey\u0026#34;, Item:{ \u0026#34;Agent\u0026#34;: event.Details.ContactData.Attributes.Agent, \u0026#34;Timestamp\u0026#34;: new Date().toLocaleString(), \u0026#34;SurveyScore\u0026#34;: event.Details.ContactData.Attributes.SurveyScore, \u0026#34;CustomerPhone\u0026#34;: event.Details.ContactData.CustomerEndpoint.Address, \u0026#34;ContactId\u0026#34;: event.Details.ContactData.ContactId, \u0026#34;ContactFlowName\u0026#34;: event.Details.ContactData.Queue.Name } }; docClient.put(params,function(err,data){ if(err){ console.error(\u0026#34;Unable to add item. Error JSON:\u0026#34;, JSON.stringify(err, null, 2)); context.fail(buildResponse(false)); } else { console.log(\u0026#34;Added item:\u0026#34;, JSON.stringify(data, null, 2)); callback(null,buildResponse(true)); } }); }; function buildResponse(isSuccess){ if(isSuccess){ return { Result:\u0026#34;Success\u0026#34; }; } else { console.log(\u0026#34;Lambda returned error to Connect\u0026#34;); return{Result:\u0026#34;Error\u0026#34;}; } } 点击代发上方的“Deploy”按钮发布代码。   "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/4.integratelambda/",
	"title": "将Lambda集成到Amazon Connect",
	"tags": ["advanced"],
	"description": "",
	"content": "试验说明 此步骤通过在Amazon Connect中注册之前创建的Lambda函数，并在联系流中调用Lambda以完成挂机后评价功能。\n一、授权Amazon Connect访问Lambda  在 AWS 控制台中，导航到Amazon Connect服务。 单击\u0026quot;实例别名\u0026quot;进入账户概览。 从左侧的菜单中选择\u0026quot;联系流\u0026quot;。 向下滚动到 AWS Lambda 部分。 从函数下拉菜单中，选择“AmazonConnectSurveyLambda”函数并单击“+添加 Lambda 函数”   二、导入并设置Disconnect Flow  下载联系流文件到本地电脑。 \r\r下载链接:\r\r\rDemo disconnect flow.json\r\r(8 ko)\r\r\r\r 导航到“联系流”界面，并点击“创建联系流”。 进入联系流编辑界面，点击右上角的下拉箭头，点击“导入流(Beta)”，导入下载的文件。  在联系流编辑界面，点击“调用AWS Lambda函数”块，在弹出的界面中选择“AmazonConnectSurveyLambda”函数，并点击保存。  点击右上角的“发布”按钮发布联系流。   三、设置Default agent whisper流  导航到“联系流”界面，点击“Default agent whisper”打开编辑页面。 拖拽左侧面板的“设置联系人属性”到画布，将“设置联系人属性”加入到联系流。 点击“设置联系人属性”，打开属性编辑面板，设置目标属性为“Agent”，点击使用属性，并将类型设置为“代理”，属性设置为“用户名”。然后点击“Save”按钮。  点击“发布”按钮。 这一步骤的作用是将接听电话的Agent的用户名设置为联系人属性，方便Lambda函数将用户名及对应的客户评价写入DynamoDB。\n\r  四、设置Demo inbound flow  导航到“联系流”界面，并点击“Demo inbound flow”进入编辑页面。 拖拽“设置断开流”模块到画布中，点击“设置断开流”，在弹出的界面中将“选择流”设置为“Demo disconnect flow”.  将设置断开流加入到“入口点”之后的流程中,然后点击“发布”按钮进行发布。   "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/5.testlambda/",
	"title": "测试Lambda挂机评价",
	"tags": ["advanced"],
	"description": "",
	"content": "试验说明 本部分试验主要对挂机后评价功能进行测试。 在进行通话测试的时候，您可以使用自己的手机或者固定电话直接拨打Connect号码，也可以同时在两个浏览器登录两个用户账号，使用其中一个拨打Connect号码,另外一个账号进行接听。详见： 测试Connect联络\n\r测试挂机评价流程  点击Amazon Connect控制台右上角的电话图标，打开联系控制面板(CCP)。 将代理设置为Available状态。  拨打Amazon Connect实例的电话号码，你会听到提示音，并且将您路由到对应的客服。 通话完毕后，代理首先挂断电话，然后客户就会听到邀请评价的提示音。 根据提示进行评价。 结束通话。 在AWS控制台，导航到DynamoDB服务。 点击“AmazonConnectSurvey”进入到详情页。   用户评价存入DynamoDB之后，您可以使用Glue和Athena对等服务进行数据处理、查询和分析，这部分不在本次试验的范畴内，留给您进行探索。\n\r"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/2.contactflow/",
	"title": "2. 创建联系流",
	"tags": ["beginner"],
	"description": "",
	"content": "联系流（Contact Flow）介绍 本部分对联系流进行介绍，包括以下几个方面：\n  介绍联系流库和Sample/Default联系流\n  新建入站联系流\n  查看常用的联系块\n  编写一个完整的入站联系流\n  测试入站联系流\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/2.contactflow/1.contactflow_basic/",
	"title": "2.1 介绍联系流库和示例/默认联系流",
	"tags": ["beginner"],
	"description": "",
	"content": "什么时Contact Flow（联系流）? 联系流定义了从开始到结束的联络中心的客户体验。 Amazon Connect 包含一组默认联系流，因此您可以快速设置和运行联络中心。 但是，您可能希望为您的特定场景创建自定义联系流。\n 选择 路由选择 -\u0026gt; 联系流 访问联系流库. 可以使用屏幕顶部的搜索选项过滤列表   过滤器从头开始匹配，而不是流中的任何匹配文本 过滤器不区分大小写  您可以扩展每页的行数 当没有定义其他联系流时，默认联系流在给定条件下生效。 示例：如果呼叫被路由到队列，并且没有客户队列流，则将调用默认客户队列流。 在进行故障排除时，了解这一点很重要； 如果你没有专门编程体验，它最像一个默认生效的流程。 示例流程是向您展示如何使用特定功能的基本示例。 它们不打算按原样投入生产，也不一定从错误处理的角度展示最佳实践。  查看不同的联系流类型 Amazon Connect 包括一组九种联系流类型。每种类型只能使用特定场景的联系块。例如，用于转移到队列的联系流类型仅包含该类型流的适当联系块。需要注意的是，当您创建联系流时，您需要为您的场景选择正确的类型，否则您需要的块可能不可用。此外，一旦您将联系流创建为特定类型，就无法更改该类型。\n可以使用的联系流类型如下：\nInbound contact flow（入站联系流）\n这是在您选择创建联系流按钮时创建的通用联系流类型，不要使用下拉箭头选择类型。它创建一个入站联系流。此联系流适用于语音、聊天和任务。\nCustomer queue flow（客户队列流程）\n用于管理客户在加入代理的之前排队时的体验。客户队列流是可中断的，并且利用转移到队列块，可以包括诸如为延迟道歉的音频剪辑和提供接收回拨的选项。此联系流适用于语音、聊天和任务。\nCustomer hold flow（客户保持流程）\n用于在客户处于等待状态时管理客户体验。通过此流程，可以在等待时使用循环提示块向客户播放一个或多个音频提示。此联系流适用于语音。\nCustomer whisper flow（客户私密消息）\n用于管理客户在加入座席之前作为入站呼叫的一部分的体验。代理和客户的私密消息播放完毕，然后将两者加入。此联系流适用于语音和聊天。\nOutbound whisper flow（出站私密消息）\n用于在与代理联系之前管理客户在出站呼叫中的体验。在此流程中，将客户的私密消息播放完成，然后将两者加入。例如，此流程可用于通过设置录音行为块启用出站呼叫的呼叫录音。此联系流适用于语音和聊天。\nAgent hold flow（代理保持流程）\n用于管理代理在等待客户时的体验。通过此流程，可以在客户处于等待状态时使用循环提示块向代理播放一个或多个音频提示。此联系流适用于语音。\nAgent whisper flow（代理私密消息）\n用于管理代理在加入客户之前作为入站呼叫的一部分所体验的内容。代理和客户的私密消息播放完毕，然后将两者加入。此联系流适用于语音、聊天和任务。\nTransfer to agent flow（转移到代理流）\n用于管理代理在转移到另一个代理时的体验。这种类型的流与转移到代理Quick Connect（快速连接）相关联，并且经常播放消息，然后使用转移到代理块完成转移。此联系流适用于语音、聊天和任务。\nTransfer to queue flow（转移到队列流）\n用于管理代理在转移到另一个队列时的体验。这种类型的流与转移到队列Quick Connect（快速连接）相关联，并且经常播放消息，然后使用转移到队列块完成转移。此联系流适用于语音、聊天和任务。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/2.contactflow/2.createbasicinboundflow/",
	"title": "2.2 新建入站联系流",
	"tags": ["beginner"],
	"description": "",
	"content": "新建一个空的入站联系流 现在，我们已经理解了不同的联系流类型，接下来，我们就开始创建一个基础的联系流。 下图是我们即将在后续步骤创建的联系流的概览。\n记住，我们使用创建联系流按钮来创建一个入站联系流。\n 选择 路由选择 -\u0026gt; 联系流 访问联系流库。 选择创建联系流 为联系流制定一个名字,比如 Demo inbound flow 点击显示其他流信息来展开流信息，并且添加描述信息. 在查看流的不同版本时，该描述可能很有用。 点击保存.   "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/2.contactflow/3.reviewcontactblock/",
	"title": "2.3 查看常用的联系快",
	"tags": ["beginner"],
	"description": "",
	"content": "在左侧面板中查看常用的联系块（点击可以展开） 使用联系流设计工具，无需编程经验，你可以方便地使用拖拽的方式编写连流流。您需要做的就是在画布上通过组合联系块（Contact Block）创建你需要的联系流。 常见的联系块如下：\n交互 这部分包含直接处理客户交互的块，例如播放消息或从客户那里收集信息。\n播放提示\n播放可中断的音频提示、提供文本转语音消息或提供聊天响应。\n 对于文本转语音 (TTS)，使用的是Amazon Polly服务 支持 SSML  获取客户输入\n基于客户意愿设置的分支。播放音频提示并根据 DTMF 或 Amazon Lex 意图进行分支。使用 DTMF 时音频提示可中断。\n 可以是 DTMF 或语音 如果启用了语音，则它使用的是 Amazon Lex服务。 Amazon Lex 是一项使用语音和文本在任何应用程序中构建对话界面的服务。 如果启用语音，如果配置得当，它仍然可以识别 DTMF  存储客户输入\n将数字输入存储到联系人属性。 这里只能是数字。 如果他们想要文本，例如姓名或日期，他们需要在 Get Customer 输入块中使用 Lex。 请注意，这是写入名为 Stored Customer Input 的临时属性，该属性将被下一个 Store customer input 块覆盖。\n设置 这部分提供在联系流中设置条件或属性的块\n设置工作队列\n指定调用传输到队列时要使用的队列。 还可以设置默认队列以进行比较，例如检查人员配备或检查营业时间块。\n设置联系人属性\n将键值对存储为联系人属性。 这些属性可作为联系人的永久部分使用，除非该值被专门覆盖（无法删除）。\n设置日志记录行为\n为此联系人启用联系流日志记录。 日志将写入 AWS CloudWatch Logs。\n设置录音和分析行为\n设置用于录制和/或监控（收听）语音和聊天对话的选项。 还提供了 Contact Lens for Amazon Connect 的功能。\n分支 提供根据特定标准对联系流进行分支的能力\n检查队列状态\n根据结果检查队列和分支的状态。 您可以在队列或队列容量中进行分支（队列中的呼叫）\n检查营业时间\n检查联系是发生在为队列定义的工作时间之内还是之外。\n检查联系人属性\n基于与联系人属性值的比较的分支。 支持的比较包括：等于、大于、小于、开始于、包含。\n循环\n提供基本的循环功能。 循环完成后，将遵循完整的分支。 通常与获取客户输入或调用 AWS Lambda 块一起使用。\n集成 允许通过调用 AWS Lambda 函数与外部数据源或服务进行集成\n 向 AWS Lambda 函数发送事件 事件包含有关当前联系的所有信息 允许发送附加参数 最长运行时间为 8 秒 期望一个单层的 JSON 响应  终止/转接 提供转移或终止呼叫的机制。 还提供终止某些联系流类型中的联系流处理的能力。\n断开\n结束交互\n转移到队列\n结束当前联系流并将联系转移到队列\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/2.contactflow/4.writedemocontactflow/",
	"title": "2.4 编写一个完整的入站联系流",
	"tags": ["beginner"],
	"description": "",
	"content": "使用联系流编辑器编辑入站联系流 在之前的步骤中，我们已经创建了一个空的入站联系流，并且已经理解了不同的联系流类型，接下来，我们就开始编写一个完整的联系流。 我们即将创建的联系流如下图。该联系流定了客户来电时的处理步骤，以及将客户转接到代理队列。\n 首先，创建一个新的操作小时数，用于后续的联系流。   选择 路由选择 -\u0026gt; 操作小时数 点击[添加小时数] 在打开的页面中，设置名称和描述为“Work Hours” 将时区设置为“Asia/Shanghai” 删除周六、周日，保留周一至周五做为工作时间。 点击[保存]。    下载联系流文件到本地电脑。 \r\r下载链接:\r\r\rDemo inbound flow.json\r\r(4 ko)\r\r\r\r  选择之前创建的“Demo inbound flow”联系流，此时联系流为空白状态。\n  点击保存按钮右边的下拉箭头，点击[导入流(beta)]   此时，会看到一个完整的联系流，解析来我们来编辑它。\n  点击[设置录音和分析行为]块，打开代理和客户的通话录音，然后点击保存。   点击[设置语音]块设置与客户交互的声音，将语言设置为中文（普通话），然后点击保存。   点击[检查操作小时数]块，将指定小时数设置为Work Hours，然后点击保存。   点击右上角的[发布]按钮，发布联系流。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/2.contactflow/5.testdemocontactflow/",
	"title": "2.5 测试入站联系流",
	"tags": ["beginner"],
	"description": "",
	"content": "测试入站联系流 在前边的步骤中，我们已经创建了一个入站联系流，接下来我们将对这个联系流进行测试。 在进行通话测试的时候，您可以使用自己的手机或者固定电话直接拨打Connect号码，也可以同时在两个浏览器登录两个用户账号，使用其中一个拨打Connect号码,另外一个账号进行接听。详见： 测试Connect联络\n\r 首先我们需要将此联系流绑定到之前申请的电话号码。   选择 路由 -\u0026gt; 电话号码 选择已经创建的电话号码 点击联系流/IVR的下拉框，选择“Demo inbound flow”。 点击保存。   等待大约2分钟让设置生效。 点击右上角的电话图标，打开联系控制面板(CCP)。 将代理设置为Available状态。  拨打Amazon Connect实例的电话号码，你会听到提示音，并且将您路由到对应的客服。 测试完成。  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/3.metrics/",
	"title": "3. 查看指标和报告",
	"tags": ["beginner"],
	"description": "",
	"content": "试验目的 在 Amazon Connect 中，有关联系的数据被捕获在联系记录中。 此数据可以包括联系在每个状态中花费的时间量：等待客户、排队客户、座席交互时间。\nAmazon Connect 中大多数历史和实时指标的基础是联系记录中的数据。 创建度量报告时，报告中大多数（不是全部）度量显示的值是使用联系记录中的数据计算的。\n自启动关联联系之日起，您的实例中的联系记录可使用 24 个月。 您还可以将联系记录流式传输到 Amazon Kinesis 以更长时间地保留数据，并对其执行高级分析。\n本实验的目的是了解 Amazon Connect 提供的内置指标，特别关注如下几类：\n 实时指标 历史指标 登录/注销报告  在进行本部分内容之前，请确保Amazon Connect的登录账号具有查看指标和报告的权限。你可以在“用户”-“安全配置文件”中为用户配置相关权限。 建议您使用具有“安全配置文件”中“admin”或者“CallCenterManager”权限的账户登录Amazon Connect控制台。\n\r"
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/3.metrics/1.realtimemetrics/",
	"title": "3.1 查看实时指标",
	"tags": [],
	"description": "",
	"content": "实验说明 实时指标报告显示有关联络中心活动的实时或接近实时的指标信息。 在线指标实时显示当前在线的代理数量，每 15 秒更新一次。 您可以自定义报告，为每个报告指定时间范围，为每个报告选择指标，并为要从每个报告中包含或排除的数据选择过滤器。 本部分将指导您完成有关如何创建和保存实时指标报告的步骤。\n一、创建实时指标报告  在导航菜单上，依次选择“分析”-“实时指标”。 查看现有的三种报告类型：   队列 - 一组显示其联系人和代理的队列。 代理 - 已登录代理的状态和指标。 路由配置文件 - 显示其联系人和代理的一组路由配置文件。    选择队列 - 此报告将显示队列中的指标，包含联系人和客服等信息。\n  要自定义报告，请从表格中选择齿轮图标。\n  在“时间范围”选项卡上，您可以更改衔接窗口时间，在本实验中，接受默认值即可。 在“筛选条件”选项卡中，您可以选择如何对报告进行分组。在本实验中，接受默认值即可。 在“指标”选项卡中，选择要包含在报告中的指标和字段。在本实验中，您可以选择使用默认值。\n  单击“应用”。将显示队列指标表。\n  单击“新表”并选择“代理队列”。\n  重复步骤 3-7，完成后，将显示代理队列指标表。\n  单击“新表”并选择“路由配置文件”。\n  重复步骤 3-7，完成后，将显示路由配置文件指标表。\n  单击“新表”并选择“代理”。\n  重复步骤 3-7，完成后，将显示代理指标表。   二、保存报告  保存您的报告以供将来参考，选择“保存报告”。 为报告提供一个名称，然后选择保存。   三、共享报告  要共享报告，请单击“操作”旁边的下拉箭头，然后选择“共享报告”。 点击“复制链接地址”拷贝URL地址，然后您就可以通过将链接粘贴到电子邮件或其他文档中来将 URL 发送给组织中的其他人。 要将报告发布到您的组织，打开“将报告发布到组织”下面的发布开关。 选择保存。   四、查看报告  要查看已保存的实时指标报告，请选择“分析”、“保存的报告”，然后选择“实时指标”选项卡。   "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-basic/3.metrics/2.historicalmetrics/",
	"title": "3.2 查看历史指标",
	"tags": [],
	"description": "",
	"content": "实验说明 历史指标报告包括有关联络中心过去、已完成活动和性能的数据。 Amazon Connect包含您可以立即开始使用的内置历史报告。您还可以创建自己的自定义报告。 本部分将指导您完成有关如何创建和保存历史指标报告的步骤。\n有三种报告类型：\n 队列 - 一组显示其联系人和代理的队列。 代理 - 已登录代理的状态和指标。 电话号码 - 显示其联系人和代理的一组路由配置文件。   一、创建队列指标报告   在导航菜单上，依次选择“分析”-“历史指标”。\n  选择“队列“ - 此报告将显示队列中的相关指标。\n  要自定义报告，请从表格中选择齿轮图标。\n  在“间隔 \u0026amp; 时间范围”选项卡上，您可以更改间隔和时间范围。在本实验中，接受默认值即可。 在“指标”选项卡中，选择要包含在报告中的指标和字段。在本实验中，接受默认值即可。\n  单击“应用”。将显示队列指标表。\n  保存您的报告以供将来参考，选择“保存”。为报告提供一个名称，然后选择保存。\n  要查看已保存的历史指标报告，请选择“分析”、“保存的报告”，然后选择“历史指标”选项卡。   二、创建代理指标报告   在导航菜单上，依次选择“分析”-“历史指标”。\n  选择“代理“ - 此报告将显示代理的相关指标。\n  要自定义报告，请从表格中选择齿轮图标。\n  在“间隔 \u0026amp; 时间范围”选项卡上，您可以更改间隔和时间范围。在本实验中，接受默认值即可。 在“指标”选项卡中，选择要包含在报告中的指标和字段。在本实验中，接受默认值即可。\n  单击“应用”。将显示代理指标表。\n  保存您的报告以供将来参考，选择“保存”。为报告提供一个名称，然后选择保存。\n  要查看已保存的历史指标报告，请选择“分析”、“保存的报告”，然后选择“历史指标”选项卡。   三、创建电话号码指标报告   在导航菜单上，依次选择“分析”-“历史指标”。\n  选择“电话号码“ - 此报告将显示电话号码相关的历史指标。\n  要自定义报告，请从表格中选择齿轮图标。\n  在“间隔 \u0026amp; 时间范围”选项卡上，您可以更改间隔和时间范围。在本实验中，接受默认值即可。 在“指标”选项卡中，选择要包含在报告中的指标和字段。您可以在“联系指标”和“代理指标”之间切换看看有什么不同。在本实验中，接受默认值即可。\n  单击“应用”。将显示电话号码指标表。\n  保存您的报告以供将来参考，选择“保存”。为报告提供一个名称，然后选择保存。\n  要查看已保存的历史指标报告，请选择“分析”、“保存的报告”，然后选择“历史指标”选项卡。   四、共享报告  依次点击“分析”-“保存的报告”，选择“历史指标”选项卡，然后点击要共享的报告。 要共享报告，请单击“保存”旁边的下拉箭头，然后选择“共享报告” 点击“复制链接地址”拷贝URL地址，然后您就可以通过将链接粘贴到电子邮件或其他文档中来将 URL 发送给组织中的其他人。 要将报告发布到您的组织，打开“将报告发布到组织”下面的发布开关。 选择保存。  五、计划报告  在“保存的报告”、“历史指标”选项卡中，单击报告。 选择页面右上角保存旁边的向下箭头，然后选择“计划”。 在“循环”选项卡上，指定该报告的运行频率（例如，每周周六）和开始时间（例如，午夜开始）。 对于本实验，请接受默认值。 选择创建。   "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivechatbot/1.createinteractivelambda/",
	"title": "创建交互式消息Lambda",
	"tags": ["advanced"],
	"description": "",
	"content": "部署交互式消息的 AWS Lambda 在 Lex 中如果需要对消息使用Lambda进行处理后，再传递给Connect展示给用户，该部分消息处理的过程需要Lex结合Lambda完成。该部分创建了一个交互式访问的Lambda，供后续创建Lex Bot使用。\n Note：\n在本步骤中需要创建Lambda，请下载\r\r\rinteractive_message_lexv2_function\r\r\rinteractive-messaging-node-lexv2.zip\r\r(5 ko)\r\r\r\rLambda function文件，以便在步骤3中使用；\n   在 AWS Console 中打开 AWS Lambda，选择 Create function。\n  在 Create Function 页面中，选择 Author from scratch 并输入需要的信息后点击 Create function 按钮。\n Function name: 输入 interactive_message_lexv2_function. Runtime: 选择 Node.js 14.x Architecture: 选择 x86_64    在 Function overview 页面， 选择 Code 并在右侧的 Upload from 中选在.zip 文件。\n  在 Upload a .zip file 页面，选择 Upload 并将下载的 Lambda function zip文件，并点击 Save 按钮。\n  检查并确认Lambda创建后源码中包含的文件是否正确。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivechatbot/2.importlexbot/",
	"title": "导入可交互式机器人并与Lambda绑定",
	"tags": ["advanced"],
	"description": "",
	"content": "导入交互式机器人 该步骤中，我们将要导入Lex机器人；\n Note：\n在本步骤中需要导入Lex Bot，请下载\r\r\rLex Bot\r\r\rinteractive-message-bot_v2.zip\r\r(26 ko)\r\r\r\r文件，以便在步骤3中使用；\n   在 AWS Console 中打开 Amazon Lex，点击 Get Start, 在 Actions 菜单中选择 Import\n 确保你打开的 Amazon Lex Console 是 V2 版本.\n   在 Import bot 页面中点击 Browse file并选中在上述步骤中下载的.zip文件，在下述设置中进行设置，并点击 Import 按钮\n Bot name：输入 InteractiveMessageBot_v2 IAM permissions: 选择 Create a role with basic Amazon Lex permissions. Children\u0026rsquo;s Online Privacy Protection Act (COPPA): 选择 No.  其他选项可保持默认。\n  检查导入状态，确保导入成功。\n  在 Bots 列表中点击创建的 InteractiveMessageBot，并点击 Intents 列表中的 InteractiveMessageIntent\n  在 InteractiveMessageIntent 编辑页面，在 Code hooks - optional 设置中，勾选 Use a Lambda function for initialization and validation 并点击 Save Intent\n  点击左上角 Back to intents list 回到Bot编辑页面，并进入 Aliases 菜单\n  点击 TestBotAlias 链接进入编辑页面，并点击 Language 中的 English(US) 进行编辑 在 Lambda function - optional 设置中，选择在之前步骤中创建的 Lambda Function，点击 Save保存设置。   "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivechatbot/3.buildandtestlexbot/",
	"title": "Build,测试和发布 Lex Bot",
	"tags": ["advanced"],
	"description": "",
	"content": "构建，测试和发布 Lex Bot 该步骤中，我们将导入的Bot进行构建，测试并将其发布；\n  在 Amazon Lex Console 页面中， 点击 InteractiveMessageBot 中的语言版本 English(US)，点击下方的 Build 按钮。\n  确保 Build 成功后，点击 Test 进入测试页面。 一般情况下构建需要花费一些时间。   在测试窗口，下方的输入框中输入 help 查看 Bot 的返回结果，返回结果应该是一个JSON字符串。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivechatbot/4.createconnectinstance/",
	"title": "创建Amazon Connect实例",
	"tags": ["advanced"],
	"description": "",
	"content": "创建Amazon Connect实例 该步骤中，我们将创建一个Amazon Connect实例，在后续的步骤中，我们将使用该实例对其进行配置；\n  在 AWS Console 中打开 Amazon Connect，点击 Create instance 进行创建。 设置一下配置并点击 Next 进入下一页\n Identity management： 选择 Store users in Amazon Connect AccessUrl: 输入：servicecenter-workshop-20220505 这里需要是唯一标识。    在 Step 2 中，添加一个Administrator，点击 Next 进入下一步。\n  在 Step 3 中，保持默认，点击 Next 进入下一步。\n  在 Step 4 中，保持默认设置，点击 Next 进入下一步。\n  Review and create 保存设置。 创建过程将花费大约3分钟，创建成功后，点击创建成功的Connect实例。\n Note: 这里点击实例链接进入实例详情页面。\n   在实例详情页面点击 Contact flows 页面，并在 Amazon Lex 部分和 AWS Lambda 部分进行设置。\n 在 Amazon Lex 部分选择之前步骤导入的Bot实例：InteractiveMessageBot_v2 并选择创建的 Alias：TestBotAlias 点击 Add Amazon Lex Bot 保存设置。 在 AWS Lambda 部分选择之前创建的Lambda方法：interactive_message_lexv2_function 并点击 Add Lambda Function 保存设置。    "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivechatbot/5.importcontactflow/",
	"title": "在Amazon Connect中导入并配置Contact Flow",
	"tags": ["advanced"],
	"description": "",
	"content": "在Amazon Connect中导入并配置Contact Flow 该步骤中，我们将在创建好的Amazon Connect实例管理界面中导入并配置Contact Flow。\n Note：\n在本步骤中需要导入Contact Flow，请下载\r\r\rContact Flow\r\r\rInteractiveMessaging_Flow.json\r\r(4 ko)\r\r\r\r文件，以便在步骤4中使用；\n   在 AWS Console 中打开 Amazon Connect，在实例列表中点击 Access Url 进入登陆页面。\n使用之前创建Connect实例时设置的Administrator用户名及密码进行登陆。\n  登陆完成后，进入Connect实例管控页面，从左侧的菜单栏中选择 Routing 选择 Contact flows 进入 Contact flows列表页面。\n  点击 Create contact flow 进入编辑页面，点击 Import flow(beta) 进入 Import 页面。\n  在 Import 页面选择下载的 InteractiveMessaging文件点击 Save 保存设置。\n  导入成功后，在导入的Contact flow页面中，点击 Get customer input 模块进行编辑，在Lex bot部分，重新选择之前导入的Lex bot，并选择对应的Alias，设置完成后点击 Save 保存设置。\n  完成设置后，点击 Publish 按钮发布 Contact flow。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivechatbot/6.testchatbot/",
	"title": "测试你的Chat Bot",
	"tags": ["advanced"],
	"description": "",
	"content": "在Amazon Connect中导入并配置Contact Flow 该步骤中，我们将在创建好的Amazon Connect实例管理界面中导入并配置Contact Flow。\n  进入 Amazon Connect 实例的控制面板, 点击 Test chat 进入测试页面。\n  点击 Test Settings 页面进入测试设置页面，选择之前创建的Contact Flow：InteractiveMessaging，点击 Apply 保存设置。\n  应用成功后，在Chat UI中初始化机器人，在输入框中按照提示输入help，查看机器人反馈信息是否显示选项。\n  如果显示选项正确，则表明该部分完成，后续可以按照机器人返回选项，进行点击选择，查看机器人逻辑。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployconnectchatui/1.deploycloudformation/",
	"title": "部署asyncCustomerChatUX",
	"tags": ["advanced"],
	"description": "",
	"content": "部署asyncCustomerChatUX 该步骤中，我们将使用 Amazon Connect git 中提供的 asycCustomerChatUI 进行部署。该ui example提供了了基于 Amazon Connect Chat JS 的UI交互集成。该实验完成后，可以使用Chat JS进行与客户端的集成，本实验中主要是Web端的集成，也可以以H5的方式与手机端进行集成。\nDeploy CloudFormation   在部署CloudFormation之前，首先需要准备参数：\n AmazonConnectS3BucketName: 该S3 Bucket是指Amazon Connect实例中配置的Connect 聊天记录的保持地址，在Data Storage中的Chat transcript中的设置，如amazon-connect-xxx/connect/servicecenter-workshop/ChatTranscripts, 则需要输入amazon-connect-xxx。 WebsiteS3BucketName: 该S3为创建一个静态website的S3 Bucket，可以是任意值，该S3 Bucket将存储website的资源文件，如html，js，css等。 contactFlowId: 该值为导入Amazon Connect的 Contact Flow的Id，通过Amazon Connect的实例，使用Access URL进入实例管控月面，点击Routing -\u0026gt; Contact flows -\u0026gt; 点击导入的ContactFlow，如InteractiveMessaging，点击** Show additional flow information**，将ARN值中的contact-flow后的Id获得，如arn:aws:connect:ap-southeast-2:xxxxxx:instance/12345678-1234-1234-1234-123456789012/contact-flow/12345678-1234-1234-1234-123456789012 instanceId: 该值为Amazon Connect的实例Id，如上，在ARN值部分，将instance后的值获得。 transcriptPath: 该路径是指Amazon Connect实例中配置的Connect 聊天记录的路径，在Data Storage中的Chat transcript中的设置，如amazon-connect-xxx/connect/servicecenter-workshop/ChatTranscripts, 则需要输入connect/servicecenter-workshop/ChatTranscripts。    在以下区域列表中选择并部署CloudFormation：\n   Region Launch Button     us-east-1 (N. Virginia)    us-west-2 (Oregon)    ap-southeast-2 (Sydney)    ap-northeast-1 (Tokyo)    eu-central-1 (Frankfurt)    eu-west-2 (London)    ap-southeast-1 (Singapore)    ca-central-1 (Canada)       验证CloudFormation部署 待CloudFormation部署完成后，在CloudFormation中的Output中查到到 cloudFrontDistribution 中的 Cloud Front地址进行访问 访问到一下页面说明Website部署成功： "
},
{
	"uri": "http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployconnectchatui/2.testchatbotwithchatui/",
	"title": "测试部署成功的ChatBot",
	"tags": ["advanced"],
	"description": "",
	"content": "测试部署成功的ChatBot 经过步骤1后，基于ChatJS的ChatBot UI已经部署完成，下面我们将对部署成功的ChatBot进行测试；\n在输入框中按照提示输入First Name, UserName后，点击 Start Chat 按钮开始机器人对答。\n按照菜单选项可以进行与机器人的交互。\n启动人工对答 在这里，将模拟两个角色，一个是作为用户，使用ChatUI；另一个是后台客服人员，当有用户转到Talk to an agent以后，将接入人工客服队列，作为客服人员登陆到Connect 后台后，可以与用户进行人工对答；\n通过Access URL登陆到Amazon Connect的实例管控后台，在Access URL地址后面访问： /ccp-v2\n在左上角状态切换为 Available后，在Chat UI中点击 Talk to an agent 按钮进行接入。接入后，即可通过两个角色在不同的交互页面进行文字交互。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/tags/advanced/",
	"title": "advanced",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://gotoaws.cloudguru.run/tags/beginner/",
	"title": "beginner",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://gotoaws.cloudguru.run/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://gotoaws.cloudguru.run/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]