<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>advanced on Amazon Connect Workshop</title>
    <link>http://gotoaws.cloudguru.run/tags/advanced/</link>
    <description>Recent content in advanced on Amazon Connect Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://gotoaws.cloudguru.run/tags/advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>导入可交互式机器人</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivelexbot/1.importlexbot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivelexbot/1.importlexbot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>创建交互式消息Lambda</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivelexbot/2.createinteractivemessagelambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivelexbot/2.createinteractivemessagelambda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1. 通过Lambda实现挂机评价</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/</guid>
      <description>实验目的 本实验在客服通话结束后邀请客户对本次服务进行评价，通过集成Lambda将客户的评价写入DynamoDB，最后使用Glue和Athena进行数据处理和查询。
本次实验使用到以下AWS服务：
 Amazon Connect Lambda DynamoDB Glue Athena  </description>
    </item>
    
    <item>
      <title>2. 使用Lex创建智能聊天机器人</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/</guid>
      <description>使用Amazon Connect 与 Amazon Lex创建交互式体验的智能聊天机器人 在这个模块，我们创建一个基于Amazon Connect 与 Amazon Lex的交互式体验的智能聊天机器人用来智能客服场景，该机器人具备一下功能：
 通过 Amazon Connect Chat UI集成到客户端，并使聊天机器人具备智能对答与人工客服的功能 Amazon Connect Chat UI与Amazon Lex集成过程中，具备交互式体验能力 使用Amazon Connect CCP，集成到客户系统后台，使其具备后台集成能力  本次实验包括：
 介绍什么是Lex？ 创建可交互式体验的Lex聊天机器人 与Amazon Connect进行集成 集成Amazon Connect CCP  本次实验使用到的AWS服务：
 Amazon Connect Amazon Lex CloudFormation API Gateway CloudFront S3 Lambda DynamoDB  </description>
    </item>
    
    <item>
      <title>Amazon Connect进阶</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/</guid>
      <description>在完成了基础部分以后，可以根据自己的业务系统的实际情况，有选择的对进阶部分进行了解。 如果您对基础部分都比较熟悉，而打算直接做进阶部分的话，则必须完成以下的基础部分（进阶部分会依赖以下的部分）：
 部署Amazon Connect 部署云端基础架构  通过这部分的实验内容，您可以了解以下技术内容：
 通过与Lex的集成实现智能聊天客服 通过Lambda实现挂机评价  这部分需要在完成基础内容以后进行操作，大概需要4-6小时。
 </description>
    </item>
    
    <item>
      <title>2.1 Lex介绍</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/1.-introlex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/1.-introlex/</guid>
      <description>Lex是什么 Amazon Lex 是 AWS 提供的用于构建会话界面的服务。 构建的界面可用于基于文本和基于语音的聊天。 Lex 使用与 Alexa 相同的会话引擎。 Amazon Lex 自动程序由自动语音识别 (ASR) 和自然语言理解 (NLU) 功能提供支持。</description>
    </item>
    
    <item>
      <title>2.2 部署交互式体验机器人</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivelexbot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/2.lexbot/deployinteractivelexbot/</guid>
      <description>实验目的 本实验构建交互式体验的机器人，使用与Lambda集合的Lex机器人，可在Lex的Bot中构建Intent及Slot交互流程，配合Connect需要的Request和Respone，完成Connect对Lex的调用组合。
本次实验使用到以下AWS服务：
 Amazon Lex Lambda  </description>
    </item>
    
    <item>
      <title>创建IAM策略和角色</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/1.createiamrole/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/1.createiamrole/</guid>
      <description>实验说明 为了使我们的 AWS Lambda 函数成功执行，AWS Lambda 需要具有适当权限的 AWS Identity and Access Management (IAM) 角色和策略。 使用本文中的以下步骤为 AWS Lambda 函数创建示例角色和策略，以访问所有 Amazon DynamoDB 表。
一、 创建IAM策略  在AWS控制台，打开IAM控制面板。 在导航面板，选择“策略”，“创建策略”。 选择“JSON”标签，复制以下JSON代码，并将其粘贴到文本框中。 说明：如下代码赋予对Lambda和DynamoDB的完全访问权限。  { &amp;#34;Version&amp;#34;:&amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;:[ { &amp;#34;Effect&amp;#34;:&amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;:[ &amp;#34;lambda:*&amp;#34;, &amp;#34;dynamodb:*&amp;#34; ], &amp;#34;Resource&amp;#34;:&amp;#34;*&amp;#34; } ] } 选择“下一步：标签”。 选择“下一步：审核” 将策略命名为AmazonConnectSurveyLambdaPolicy，然后点击“创建策略”。  二、 创建IAM角色  在导航面板，依次选择“角色”，“创建角色”。 在“选择可信实体”页，选择Lambda，并点击“下一步”  在添加权限页，搜索并添加前边创建的策略****AmazonConnectSurveyLambdaPolicy**，搜索并添加AWSLambdaBasicExecutionRole 然后点击“下一步”。 角色名称命名为“AmazonConnectSurveyLambdaRole”，点击“创建角色”。  </description>
    </item>
    
    <item>
      <title>创建DynamoDB</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/2.createdynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/2.createdynamodb/</guid>
      <description>试验说明 Amazon DynamoDB 是一种快速灵活的 NoSQL 数据库服务，适用于需要任何规模的一致、个位数毫秒延迟的所有应用程序。 它是一个完全托管的云数据库，支持文档和键值存储模型。 其灵活的数据模型、可靠的性能和吞吐量容量的自动扩展，使其非常适合存储和引用来自 Amazon Connect的信息。
在客户进行评价后，Amazon Connect通过集成Lambda江客户的评价相关信息写入DynamoDB，这些信息包括：ContactId, ContactFlowId, ContactFlowName, ContactFlowModuleType, Timestamp, Agent, SurveyScore等。 在创建DynamoDB时，以Agent作为分区键，以Timestamp作为排序键。
创建DynamoDB表  在AWS控制台，打开DynamoDB服务，然后选择“创建表”。 在“创建表页面”，填写表名为AmazonConnectSurvey，填写Agent作为分区键，填写Timestamp作为排序键。其它保留默认设置。  点击“创建表”。 等待表创建完成，状态显示为“活跃”。  </description>
    </item>
    
    <item>
      <title>创建Lambda函数</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/3.createlambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/3.createlambda/</guid>
      <description>试验说明 AWS Lambda 让您无需预置或管理服务器即可运行代码。 您只需为消耗的计算时间付费。 当您的代码未运行时，不收取任何费用。 上传您的代码，Lambda 会负责以高可用性运行和扩展您的代码所需的一切。 借助 AWS Lambda 和 Amazon Connect，您可以传递和返回自定义键值对，从而在您的联系流中实现多个集成点。
在客户进行评价后，在Amazon Connect的联系流调用Lambda将评价信息写入DynamoDB。
一、创建Lambda函数  在AWS控制台，打开AWS Lambda服务，然后选择“创建函数”。 选择从头开始创作。 填写函数名称为AmazonConnectSurveyLambda，运行时选择Node.js 14.x。 展开更改默认执行角色，选择“使用现有角色”。 在现有角色列表选择之前创建的角色“AmazonConnectSurveyLambdaRole”  点击“创建函数”。 TODO: 上传代码  </description>
    </item>
    
    <item>
      <title>将Lambda集成到Amazon Connect</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/4.integratelambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/4.integratelambda/</guid>
      <description>试验说明 此步骤通过在Amazon Connect中注册之前创建的Lambda函数，并在联系流中调用Lambda以完成挂机后评价功能。
一、授权Amazon Connect访问Lambda  在AWS控制台，打开Amazon Connect。 点击实例名进入账户概览。 在左侧的导航栏选择“Contact Flow” 滑动到AWS Lambda部分，选择创建的Lambda函数“AmazonConnectSurveyLambda” 点击“添加Lambda函数”   </description>
    </item>
    
    <item>
      <title>测试Lambda挂机评价</title>
      <link>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/5.testlambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gotoaws.cloudguru.run/amazon-connect-advanced/1.lambda/5.testlambda/</guid>
      <description>试验说明 TODO：</description>
    </item>
    
  </channel>
</rss>
